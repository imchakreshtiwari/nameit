{"version":3,"sources":["components/NavigationBar.js","Home.js","Post.js","components/Header/Header.js","components/SearchBox/SearchBox.js","components/NameCard/NameCard.js","components/ResultContainer/ResultContainer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["styled","div","Component","Header","headtitle","headerExpanded","className","src","alt","SearchBox","onInputChange","onChange","event","target","value","placeholder","NameCard","suggestedName","rel","href","ResultContainer","suggestedNamesJsx","map","name","key","require","App","state","headertext","handleinputChange","inputText","setState","length","console","log","this","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yoBAGeA,EAAOC,IAAV,KCFOC,YCAAA,Y,MFEnB,IGsBeC,EAvBA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eACzB,OACI,yBAAMC,UAAU,kBACZ,yBAAKC,IAAI,wGAELD,UAAS,qBAAgBD,EACnB,sBACA,yBAENG,IAAI,QAER,wBACIF,UAAS,oBAAeD,EAClB,qBACA,yBAGLD,KCNFK,G,MAVG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACjB,OACI,yBAAKJ,UAAU,oBACX,2BACIK,SAAU,SAACC,GAAD,OAAWF,EAAcE,EAAMC,OAAOC,QAChDC,YAAY,aACZT,UAAU,oBCYXU,G,YAfE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAChB,OAEI,uBACIJ,OAAO,SACPK,IAAI,sBACJZ,UAAU,YACVa,KAAI,UATZ,mEASY,OAAoBF,IAExB,yBAAKX,UAAU,oBACX,uBAAGA,UAAU,eAAeW,OCI7BG,EAhBS,SAAC,GAAuB,IAGtCC,EAHqC,EAApBJ,cAGiBK,KAAI,SAAAC,GACxC,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAMN,cAAeM,OAE/C,OAEI,yBAAMjB,UAAU,qBAEXe,ICDPE,EAAOE,EAAQ,IAsCNC,E,4MAnCbC,MAAQ,CACNC,WAAY,WACZvB,gBAAgB,EAChBY,cAAe,I,EAGjBY,kBAAoB,SAACC,GAEnB,EAAKC,SAAS,CACZ1B,iBAAkByB,EAAUE,OAAS,GAAIf,cAAea,EAAUE,OAAS,EAAIT,EAAKO,GAAa,KAEnGG,QAAQC,IAAI,kBAAmBJ,I,uDAK/B,OACE,6BACE,kBAAC,EAAD,CACEzB,eAAgB8B,KAAKR,MAAMtB,eAC3BD,UAAW+B,KAAKR,MAAMC,aACxB,kBAAC,EAAD,CAAWlB,cAAeyB,KAAKN,oBAC/B,kBAAC,EAAD,CAAiBZ,cAAekB,KAAKR,MAAMV,qB,GAvBjCf,aCHEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,6ECV1BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.1f13c858.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Nav, Navbar, Form, FormControl } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nconst Styles = styled.div`\r\n  .navbar { background-color: #222; }\r\n  a, .navbar-nav, .navbar-light .nav-link {\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n  .navbar-brand {\r\n    font-size: 1.4em;\r\n    color: #9FFFCB;\r\n    &:hover { color: white; }\r\n  }\r\n  .form-center {\r\n    position: absolute !important;\r\n    left: 25%;\r\n    right: 25%;\r\n  }\r\n`;\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">Tutorial</Navbar.Brand>\r\n\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\r\n          <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles>\r\n)\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\r\nclass Home extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <h2>Home</h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nclass Post extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <h2>Post</h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport './Header.css';\r\nconst Header = ({ headtitle, headerExpanded }) => {\r\n    return (\r\n        < div className=\"head-container\" >\r\n            <img src=\"https://user-images.githubusercontent.com/26179770/106359099-693e3380-6336-11eb-8069-9e36f25de5ca.png\"\r\n\r\n                className={`head-image ${headerExpanded\r\n                    ? 'head-image-expanded'\r\n                    : 'head-image-contracted'\r\n                    }`}\r\n                alt=\"img\"></img>\r\n\r\n            <h1\r\n                className={`head-text ${headerExpanded\r\n                    ? 'head-text-expanded'\r\n                    : 'head-text-contracted'\r\n                    }`}\r\n            >\r\n                {headtitle}\r\n            </h1>\r\n        </div >\r\n    )\r\n\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './Searchbox.css'\r\n\r\nconst SearchBox = ({ onInputChange }) => {\r\n    return (\r\n        <div className=\"search-container\">\r\n            <input\r\n                onChange={(event) => onInputChange(event.target.value)}\r\n                placeholder=\"Type Input\"\r\n                className=\"search-input\"></input>\r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\nimport './NameCard.css'\r\n\r\nconst nameCheapUrl =\r\n    'https://www.namecheap.com/domains/registration/results/?domain=';\r\n\r\nconst NameCard = ({ suggestedName }) => {\r\n    return (\r\n\r\n        <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"card-link\"\r\n            href={`${nameCheapUrl}${suggestedName}`}\r\n        >\r\n            <div className=\"result-name-card\">\r\n                <p className=\"result-name\">{suggestedName}</p>\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\nexport default NameCard;","import React from 'react';\r\nimport './ResultContainer.css'\r\nimport NameCard from '../NameCard/NameCard'\r\n\r\nconst ResultContainer = ({ suggestedName }) => {\r\n\r\n\r\n    const suggestedNamesJsx = suggestedName.map(name => {\r\n        return <NameCard key={name} suggestedName={name} />;\r\n    });\r\n    return (\r\n\r\n        < div className=\"results-container\">\r\n\r\n            {suggestedNamesJsx}\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\nexport default ResultContainer;","import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavigationBar from './components/NavigationBar';\nimport Home from './Home';\nimport Post from './Post';\nimport Header from './components/Header/Header'\nimport SearchBox from './components/SearchBox/SearchBox'\nimport ResultContainer from './components/ResultContainer/ResultContainer'\n// https://reacttraining.com/react-router/web/example/basic for routing\n\nconst name = require('@rstacruz/startup-name-generator');\n\nclass App extends Component {\n  state = {\n    headertext: \"Name It!\",\n    headerExpanded: true,\n    suggestedName: []\n  }\n\n  handleinputChange = (inputText) => {\n\n    this.setState({\n      headerExpanded: !(inputText.length > 0), suggestedName: inputText.length > 0 ? name(inputText) : []\n    })\n    console.log(\"Input text is :\", inputText)\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Header\n          headerExpanded={this.state.headerExpanded}\n          headtitle={this.state.headertext} />\n        <SearchBox onInputChange={this.handleinputChange} />\n        <ResultContainer suggestedName={this.state.suggestedName} />\n        {/* {this.state.headertext} */}\n        {/* <button onClick={() => {\n          this.setState({\n            headertext: \"This is a cool App Changed\"\n          })\n        }}>Search</button> */}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n\n{/* <BrowserRouter>\n      <div>\n        <NavigationBar />\n\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={Post} />\n        </Switch>\n\n      </div>\n    </BrowserRouter> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}